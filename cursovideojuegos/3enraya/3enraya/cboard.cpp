// Class automatically generated by Dev-C++ New Class wizard

#include "cboard.h" // class's header file

#include <sstream>

// class constructor
CBoard::CBoard()
{
	Init();
}

// class destructor
CBoard::~CBoard()
{
}

void CBoard::getDimension(int *x,int *y) const
{
    *x=*y=3;
}

void CBoard::Init()    
{
    int xdim,ydim;
    
    getDimension(&xdim,&ydim);
    for (int y=0;y<ydim;y++)
        for (int x=0;x<xdim;x++)
                m_Ficha[y][x]=NOTHING;
}

void CBoard::verifDimension(int x,int y) const throw(string)
{
    int xdim,ydim;

    getDimension(&xdim,&ydim);
    if (x<=0 || x>xdim)
    {
        ostringstream outs;
        outs << "coordenada x incorrecta, ponga un valor desde 1 hasta " << xdim;
        throw outs.str();
    }
    if (y<=0 || y>ydim)
    {
        ostringstream outs;
        outs << "coordenada y incorrecta, ponga un valor desde 1 hasta " << ydim;
        throw outs.str();
    }
}

void CBoard::set(EFicha ficha,int x,int y) throw(string)
{
    EFicha fpos=get(x,y);

    if (fpos!=CBoard::NOTHING)
    {
        ostringstream outs;
        outs << "la posiciÃ³n (" << x << "," << y << ") esta ocupada" << ends;
        throw outs.str();
    }
    m_Ficha[y-1][x-1]=ficha;

}

enum CBoard::EFicha CBoard::get(int x,int y)  const throw(string)
{
    verifDimension(x,y);

    return m_Ficha[y-1][x-1];
}

CBoard::SEstado CBoard::isFinish() const
{
    SEstado estado={false,false,NOTHING};
    int xdim,ydim;

    getDimension(&xdim,&ydim);
    estado.isfinish=true;
    for (int y=1;y<=ydim;y++)
        for (int x=1;x<=xdim;x++)
            if (get(x,y)==NOTHING)
                estado.isfinish=false;
    estado.winer=winer();
    if (estado.isfinish && estado.winer==NOTHING)
        estado.isempate=true;
    else
        if (estado.winer!=NOTHING)
            estado.isfinish=true;

    return estado;
}

CBoard::EFicha CBoard::winer() const
{
    int xdim,ydim;

    getDimension(&xdim,&ydim);
    EFicha w=winer(1,1,1,1);
    if (w!=NOTHING)
        return w;
    w=winer(xdim,1,-1,1);
    if (w!=NOTHING)
        return w;
    for (int y=1;y<=ydim;y++)
    {
        w=winer(1,y,1,0);
        if (w!=NOTHING)
            return w;
    }
    for (int x=1;x<=xdim;x++)
    {
        w=winer(x,1,0,1);
        if (w!=NOTHING)
            return w;
    }

    return NOTHING;
}

CBoard::EFicha CBoard::winer(int x,int y,int dx,int dy) const
{
    EFicha w=get(x,y);
    int xdim,ydim;

    if (w==NOTHING)
        return NOTHING;
    getDimension(&xdim,&ydim);
    for (;x>=1 && x<=xdim && y>=1 && y<=ydim; x+= dx,y+= dy)
        if (get(x,y)!=w)
            return NOTHING;
    return w;
}

